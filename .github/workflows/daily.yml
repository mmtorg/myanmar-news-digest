name: Daily Myanmar News Digest

on:
  schedule:
    - cron: "30 16 * * *" # ミャンマー時間 23:00（UTC+6:30）
  workflow_dispatch: # 手動＝開発で実行

jobs:
  prod:
    if: (github.event_name == 'schedule' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')
    name: Run (production / main)
    runs-on: ubuntu-latest
    environment: production
    concurrency:
      group: daily-digest-production
      cancel-in-progress: false

    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install "fugashi[unidic-lite]" ipadic
          pip install --upgrade google-genai google-api-core
          rm -rf ~/.cache/huggingface

      - name: Run fetch script (with memory profiling)
        env:
          TZ: Asia/Yangon
          EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
          EMAIL_RECIPIENTS: ${{ secrets.EMAIL_RECIPIENTS }}
          INTERNAL_EMAIL_RECIPIENTS: ${{ secrets.INTERNAL_EMAIL_RECIPIENTS }}
          GEMINI_API_SUMMARY_KEY: ${{ secrets.GEMINI_API_SUMMARY_KEY }}
          GEMINI_API_DEDUPE_KEY: ${{ secrets.GEMINI_API_DEDUPE_KEY }}
          GMAIL_CLIENT_ID: ${{ secrets.GMAIL_CLIENT_ID }}
          GMAIL_CLIENT_SECRET: ${{ secrets.GMAIL_CLIENT_SECRET }}
          GMAIL_REFRESH_TOKEN: ${{ secrets.GMAIL_REFRESH_TOKEN }}
        run: /usr/bin/time -v python fetch_articles.py 2> time.txt

      - name: Memory summary (prod)
        if: always()
        shell: bash
        run: |
          echo "### Memory report — GNU time on Ubuntu" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          if [[ -f time.txt ]]; then
            MAX_RSS_KB=$(grep -E 'Maximum resident set size' time.txt | awk '{print $NF}' || true)
            if [[ -n "${MAX_RSS_KB:-}" ]]; then
              echo "- **Max RSS**: ${MAX_RSS_KB} KB" >> "$GITHUB_STEP_SUMMARY"
            else
              echo "- **Max RSS**: (not captured)" >> "$GITHUB_STEP_SUMMARY"
            fi
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "<details><summary>raw /usr/bin/time -v</summary>" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            sed 's/|/\\|/g' time.txt >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "</details>" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "- **Max RSS**: (time.txt not found)" >> "$GITHUB_STEP_SUMMARY"
          fi

  dev:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/develop'
    name: Run (development / develop)
    runs-on: ubuntu-latest
    environment: development
    concurrency:
      group: daily-digest-development
      cancel-in-progress: true # 手動は新しい方を優先して前の実行を止める

    steps:
      - uses: actions/checkout@v4
        with:
          ref: develop

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install "fugashi[unidic-lite]" ipadic
          pip install --upgrade google-genai google-api-core
          rm -rf ~/.cache/huggingface

      - name: Run fetch script (with memory profiling)
        env:
          TZ: Asia/Yangon
          EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
          EMAIL_RECIPIENTS: ${{ secrets.EMAIL_RECIPIENTS }}
          INTERNAL_EMAIL_RECIPIENTS: ${{ secrets.INTERNAL_EMAIL_RECIPIENTS }}
          GEMINI_API_SUMMARY_KEY: ${{ secrets.GEMINI_API_TEST_SUMMARY_KEY }}
          GEMINI_API_DEDUPE_KEY: ${{ secrets.GEMINI_API_TEST_DEDUPE_KEY }}
          GMAIL_CLIENT_ID: ${{ secrets.GMAIL_CLIENT_ID }}
          GMAIL_CLIENT_SECRET: ${{ secrets.GMAIL_CLIENT_SECRET }}
          GMAIL_REFRESH_TOKEN: ${{ secrets.GMAIL_REFRESH_TOKEN }}
        run: /usr/bin/time -v python fetch_articles.py 2> time.txt

      - name: Memory summary (dev)
        if: always()
        shell: bash
        run: |
          echo "### Memory report — GNU time on Ubuntu" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          if [[ -f time.txt ]]; then
            MAX_RSS_KB=$(grep -E 'Maximum resident set size' time.txt | awk '{print $NF}' || true)
            if [[ -n "${MAX_RSS_KB:-}" ]]; then
              echo "- **Max RSS**: ${MAX_RSS_KB} KB" >> "$GITHUB_STEP_SUMMARY"
            else
              echo "- **Max RSS**: (not captured)" >> "$GITHUB_STEP_SUMMARY"
            fi
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "<details><summary>raw /usr/bin/time -v</summary>" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            sed 's/|/\\|/g' time.txt >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "</details>" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "- **Max RSS**: (time.txt not found)" >> "$GITHUB_STEP_SUMMARY"
          fi
